let canvasWidth = 600;
let canvasHeight = 400; 
let bit = [0, 1];
let bitValue = bit.length;
let byte = 8;
let byteValue = bitValue ** byte;
let byteArray = [];
for (let i = 0; i < byte; i++) {
   byteArray.push(bit);
}
let randomNumber = Math.random();
let randomByte;
let r = [];
let g = [];
let b = [];
for (i = 0; i < byteValue; i++) {
   r.push(i);
   g.push(i);
   b.push(i);
}
let columnWidth = 10;
let rowHeight = 10;
let hoRatio = canvasWidth / columnWidth;
let verRatio = canvasHeight / rowHeight;
let pixNum = hoRatio * verRatio;
let x = 0;
let y = 0;

//updated canvas function
function C(i) {
   const cnv = document.getElementById(`canvas-${i}`)
   cnv.width = canvasWidth
   cnv.height = canvasHeight
   x++;
   ctx = cnv.getContext('2d');
   ctx.fillStyle = "white";
   ctx.strokeStyle = 'white'
   ctx.font = "bold 18px Arial";
   ctx.fillText(i, 4, 18)
}

function Button (i, myFunc) {
const btn = document.getElementById(`btn-${i}`);
   btn.width = 60;
   btn.height = 60;
   const ctx = btn.getContext("2d");
   
   const circle = new Path2D();
   circle.arc(30, 30, 20, 0.2 * Math.PI, 1.8 * Math.PI); // draw a circle
   
   ctx.strokeStyle = 'rgb(150, 150, 150)';
   ctx.lineWidth = 4;
   
   // draw the circle
   ctx.stroke(circle);

   const triangle = new Path2D();
   triangle.moveTo(39, 22);
   triangle.lineTo(52, 28);
   triangle.lineTo(52, 13);
   triangle.closePath();

   // Draw the arc and the triangle
   ctx.fillStyle = 'rgb(150, 150, 150)';
   ctx.fill(triangle);

   btn.addEventListener('click', myFunc)
}

function pixel(x, y, red, green, blue, opacity) {
   ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${opacity})`;
   ctx.fillRect(x, y, 10, 10);
}

function Speckle() {
   let delta = [Math.floor(Math.random() * 10) + 170];
   let epsilon = [Math.floor(Math.random() * 10) + 200];
   let zeta = [Math.floor(Math.random() * 10) + 246];
   ctx.shadowBlur = 12;
   ctx.shadowBlur = 4;
   ctx.shadowBlur = 8;
   ctx.shadowColor = `rgb(${delta}, ${epsilon}, ${zeta})`;
   let xVariety = Math.floor(Math.random() * hoRatio) * columnWidth;
   let yVariety = Math.floor(Math.random() * verRatio) * rowHeight;
   let oVariety = Math.random() * .8;

   pixel(xVariety, yVariety, r[delta], g[epsilon], b[zeta], oVariety);
}

function randomNightSky (i) {

   
}

//Random Night Sky
Button(y)
C(x)
for (let i = 0; i < hoRatio; i++) {
   for (let j = 0; j < verRatio; j++){
      let alpha = [Math.floor(Math.random() * 30) + 40];
      let beta = [Math.floor(Math.random() * 10) + 5];
      let gamma = [Math.floor(Math.random() * 10) + 5];
      pixel(i * columnWidth, j * rowHeight, r[alpha], g[beta], b[gamma], 1);
   }
  
}

for (let i = 0; i < 16; i++) {
   Speckle()
}

//grid of lines
C(x)
ctx.strokeStyle = '#ffffff';
let lines = (sX, sY, eX, eY) => {
   ctx.beginPath();
   ctx.moveTo(sX, sY);
   ctx.lineTo(eX, eY);
   ctx.stroke();
}

for (i = 1; i < hoRatio; i++) {
   lines(i * columnWidth, 0, i * columnWidth, canvasHeight);
}

for (i = 1; i < verRatio; i++) {
   lines(0, i * rowHeight, canvasWidth, i * rowHeight);
}

//An array containing 8 bits
C(x)
ctx.fillText("byteArray contains: ", canvasWidth / 2, canvasHeight / 2 - 40);
for (let i = 0; i < byte; i++) {
   ctx.fillText(`[${byteArray[i]}]`, (canvasWidth / 10) * i + 90, canvasHeight / 2);
}

console.log(byteArray);
let randomByteArray = [];

for (let i = 0; i < byte; i++) {
   let dice = Math.floor(Math.random() + .5)
   randomByteArray.push(byteArray[i][dice]);
}

//Randomly generated byte
C(x)
ctx.fillText(`${randomByteArray.join("")}`, 50, 20);

let randomeByteGenerator = () => {
   for (let i = 0; i < byte; i++) {
      let dice = Math.floor(Math.random() + .5)
      randomByteArray.push(byteArray[i][dice]);
      randomByte = randomByteArray.join("");
   }
   randomByteArray = [];
   return randomByte;
}

let byteWidth = 100;
let byteHeight = 20;
let wRatio = canvasWidth / byteWidth;
let hRatio = canvasHeight / byteHeight;

//Randomly generated bytes
C(x)
for (let iota = 0; iota < wRatio; iota++) {
   for (let yoda = 1; yoda <= hRatio; yoda++)
   ctx.fillText(`${randomeByteGenerator()}`, iota * byteWidth + 20, 
   yoda * byteHeight);
}

//Final night sky
C(x)
for (let i = 0; i < hoRatio; i++) {
   for (let j = 0; j < verRatio; j++){
      let alpha = [Math.floor(Math.random() * 30) + 40];
      let beta = [Math.floor(Math.random() * 10) + 5];
      let gamma = [Math.floor(Math.random() * 10) + 5];
      pixel(i * columnWidth, j * rowHeight, r[alpha], g[beta], b[gamma], 1);
   }
  
}

for (let i = 0; i < 16; i++) {
   Speckle()
}
